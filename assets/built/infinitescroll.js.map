{
  "version": 3,
  "sources": [
    "infinitescroll.js"
  ],
  "names": [
    "$",
    "currentPage",
    "window",
    "location",
    "pathname",
    "$document",
    "document",
    "$result",
    "ticking",
    "isLoading",
    "lastWindowHeight",
    "lastDocumentHeight",
    "height",
    "lastScrollY",
    "requestTick",
    "scrollY",
    "innerHeight",
    "requestAnimationFrame",
    "infiniteScroll",
    "path",
    "paginationRegex",
    "replace",
    "match",
    "parseInt",
    "buffer",
    "maxPages",
    "removeEventListener",
    "onResize",
    "passive",
    "posts",
    "querySelectorAll",
    "nextPage",
    "content",
    "forEach",
    "createRange",
    "createContextualFragment",
    "appendChild",
    "length",
    "call",
    "post",
    "xhr",
    "status",
    "onScroll",
    "addEventListener"
  ],
  "mappings": "aAEAA,EAAA,SAAAA,GACE,IAAAC,EAAa,EACPA,EAAWC,OAAfC,SAAAC,SACIA,EAAWF,EAAAA,UACXG,EAAYL,EAAEM,cACdC,EAAW,IAGXC,GAAU,EACVC,GAAY,EAGZC,EAAgBR,OAAGA,QACnBS,EAAqBN,OAAAA,YAArBM,EAAqBN,EAAUO,SAG/BC,SAAAA,IACAC,EAAWZ,OAAAa,QACdD,IAGGJ,SAAAA,IACAC,EAAqBN,OAASW,YAC9BF,EAAWT,EAAAO,SACdE,IAGG,SAAKN,IACDS,GACHA,sBAAAC,GACDV,GAAA,EAsBJ,SAASU,IAnBT,IAA0BC,EAClBC,EAuBJ,GAvBIA,EAAkB,0BAMtBD,GAPsBA,EAyBlBf,GAlBJiB,QAAA,UAAA,IAAAA,QAAA,QAAA,MAMeC,MAACD,KACfpB,EAAAsB,SAAAJ,EAAAG,MAAAF,GAAA,IAEMD,EAAPA,EAAAE,QAAAD,EAAA,KASIhB,EANCc,GAKDT,EAUJ,GAAAI,EAAAH,GAAAC,EAAAa,EAJIhB,GAAU,MAId,CAOI,GAAAP,GAAAwB,SAGH,OAFSvB,OAACwB,oBAAoB,SAAUC,EAArC,CAAAC,SAAA,SACA1B,OAAAwB,oBAAA,SAAAC,GAGJlB,GAAY,EAUR,IAAIoB,EAAazB,EAAC0B,SAJlBC,GAAW3B,GAIX,IACAJ,EAAI6B,IAAAA,EAAc,SAAAG,GACXC,IACC1B,EADYsB,SAAOK,cAAgBC,yBAAAH,GACxBI,iBAAX,SADJP,EAAAQ,QAGH,GAAAJ,QAAAK,KAAAT,EAAA,SAAAU,GACGhC,EAAe,GAAA6B,YAAAG,OAGfrC,KAAOwB,SAAAA,GAAP,MAAAc,EAAAC,SACOf,OAAAA,oBAAP,SAAAgB,EAAA,CAAAd,SAAA,IACH1B,OAAAwB,oBAAA,SAAAC,MAEDhB,OAAAA,WACAF,EAAAJ,EAAAO,SAhBJJ,EAiBIA,GAAA,KAIqCoB,OAAOe,iBAAE,SAAAD,EAAA,CAAAd,SAAA,IAAtD1B,OAAAyC,iBAAA,SAAAhB,GAGAT",
  "file": "infinitescroll.js",
  "sourcesContent": [
    "/* global maxPages */\n\n// Code snippet inspired by https://github.com/douglasrodrigues5/ghost-blog-infinite-scroll\n$(function ($) {\n    var currentPage = 1;\n    var pathname = window.location.pathname;\n    var $document = $(document);\n    var $result = $('.post-feed');\n    var buffer = 300;\n\n    var ticking = false;\n    var isLoading = false;\n\n    var lastScrollY = window.scrollY;\n    var lastWindowHeight = window.innerHeight;\n    var lastDocumentHeight = $document.height();\n\n    function onScroll() {\n        lastScrollY = window.scrollY;\n        requestTick();\n    }\n\n    function onResize() {\n        lastWindowHeight = window.innerHeight;\n        lastDocumentHeight = $document.height();\n        requestTick();\n    }\n\n    function requestTick() {\n        if (!ticking) {\n            requestAnimationFrame(infiniteScroll);\n        }\n        ticking = true;\n    }\n\n    function sanitizePathname(path) {\n        var paginationRegex = /(?:page\\/)(\\d)(?:\\/)$/i;\n\n        // remove hash params from path\n        path = path.replace(/#(.*)$/g, '').replace('////g', '/');\n\n        // remove pagination from the path and replace the current pages\n        // with the actual requested page. E. g. `/page/3/` indicates that\n        // the user actually requested page 3, so we should request page 4\n        // next, unless it's the last page already.\n        if (path.match(paginationRegex)) {\n            currentPage = parseInt(path.match(paginationRegex)[1]);\n\n            path = path.replace(paginationRegex, '');\n        }\n\n        return path;\n    }\n\n    function infiniteScroll() {\n        // sanitize the pathname from possible pagination or hash params\n        pathname = sanitizePathname(pathname);\n\n        // return if already loading\n        if (isLoading) {\n            return;\n        }\n\n        // return if not scroll to the bottom\n        if (lastScrollY + lastWindowHeight <= lastDocumentHeight - buffer) {\n            ticking = false;\n            return;\n        }\n\n        /**\n        * maxPages is defined in default.hbs and is the value\n        * of the amount of pagination pages.\n        * If we reached the last page or are past it,\n        * we return and disable the listeners.\n        */\n        if (currentPage >= maxPages) {\n            window.removeEventListener('scroll', onScroll, {passive: true});\n            window.removeEventListener('resize', onResize);\n            return;\n        }\n\n        isLoading = true;\n\n        // next page\n        currentPage += 1;\n\n        // Load more\n        var nextPage = pathname + 'page/' + currentPage + '/';\n\n        $.get(nextPage, function (content) {\n            var parse = document.createRange().createContextualFragment(content);\n            var posts = parse.querySelectorAll('.post');\n            if (posts.length) {\n                [].forEach.call(posts, function (post) {\n                    $result[0].appendChild(post);\n                });\n            }\n        }).fail(function (xhr) {\n            // 404 indicates we've run out of pages\n            if (xhr.status === 404) {\n                window.removeEventListener('scroll', onScroll, {passive: true});\n                window.removeEventListener('resize', onResize);\n            }\n        }).always(function () {\n            lastDocumentHeight = $document.height();\n            isLoading = false;\n            ticking = false;\n        });\n    }\n\n    window.addEventListener('scroll', onScroll, {passive: true});\n    window.addEventListener('resize', onResize);\n\n    infiniteScroll();\n});\n"
  ]
}
